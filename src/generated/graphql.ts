import gql from "graphql-tag";
import * as ReactApolloHooks from "react-apollo-hooks";
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Comment */
export type Comment = {
  __typename?: "Comment";
  content: Scalars["String"];
  id: Scalars["ID"];
  post: Post;
};

/** Autogenerated input type of CreateComment */
export type CreateCommentInput = {
  postId: Scalars["ID"];
  content: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateComment */
export type CreateCommentPayload = {
  __typename?: "CreateCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  comment?: Maybe<Comment>;
  result?: Maybe<Scalars["Boolean"]>;
};

/** Autogenerated input type of CreatePost */
export type CreatePostInput = {
  title?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreatePost */
export type CreatePostPayload = {
  __typename?: "CreatePostPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  post?: Maybe<Post>;
  result?: Maybe<Scalars["Boolean"]>;
};

/** Autogenerated input type of DeletePost */
export type DeletePostInput = {
  id: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of DeletePost */
export type DeletePostPayload = {
  __typename?: "DeletePostPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  post?: Maybe<Post>;
  result?: Maybe<Scalars["Boolean"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  createComment?: Maybe<CreateCommentPayload>;
  createPost?: Maybe<CreatePostPayload>;
  deletePost?: Maybe<DeletePostPayload>;
  updatePost?: Maybe<UpdatePostPayload>;
};

export type MutationCreateCommentArgs = {
  input: CreateCommentInput;
};

export type MutationCreatePostArgs = {
  input: CreatePostInput;
};

export type MutationDeletePostArgs = {
  input: DeletePostInput;
};

export type MutationUpdatePostArgs = {
  input: UpdatePostInput;
};

/** Post */
export type Post = {
  __typename?: "Post";
  comments: Array<Comment>;
  description: Scalars["String"];
  id: Scalars["Int"];
  title: Scalars["String"];
};

export type Query = {
  __typename?: "Query";
  post: Post;
  posts: Array<Post>;
};

export type QueryPostArgs = {
  id?: Maybe<Scalars["ID"]>;
};

/** Autogenerated input type of UpdatePost */
export type UpdatePostInput = {
  id: Scalars["ID"];
  title?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdatePost */
export type UpdatePostPayload = {
  __typename?: "UpdatePostPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  post?: Maybe<Post>;
  result?: Maybe<Scalars["Boolean"]>;
};
export type PostsQueryVariables = {};

export type PostsQuery = { __typename?: "Query" } & {
  posts: Array<
    { __typename?: "Post" } & Pick<Post, "id" | "title" | "description">
  >;
};

export const PostsDocument = gql`
  query posts {
    posts {
      id
      title
      description
    }
  }
`;

export function usePostsQuery(
  baseOptions?: ReactApolloHooks.QueryHookOptions<PostsQueryVariables>
) {
  return ReactApolloHooks.useQuery<PostsQuery, PostsQueryVariables>(
    PostsDocument,
    baseOptions
  );
}
